import unittest
import sys
import os
sys.path.append(r'./')
# print(sys.path)
from src.colorspace import *
from src.io_ import *
from src.api import *
# import src
import numpy as np
from skimage.color import colorconv
from src.color import *
array = np.array
na = np.testing.assert_array_almost_equal

fileDict = {'imgs/input1.png': np.array([[214.11,  98.67,  37.97],
       [231.94, 153.1 ,  85.27],
       [204.08, 143.71,  78.46],
       [190.58, 122.99,  30.84],
       [230.93, 148.46, 100.84],
       [228.64, 206.97,  97.5 ],
       [229.09, 137.07,  55.29],
       [189.21, 111.22,  92.66],
       [223.5 ,  96.42,  75.45],
       [201.82,  69.71,  50.9 ],
       [240.52, 196.47,  59.3 ],
       [235.73, 172.13,  54.  ],
       [131.6 ,  75.04,  68.86],
       [189.04, 170.43,  42.05],
       [222.23,  74.  ,  71.95],
       [241.01, 199.1 ,  61.15],
       [224.99, 101.4 , 100.24],
       [174.58, 152.63,  91.52],
       [248.06, 227.69, 140.5 ],
       [241.15, 201.38, 115.58],
       [236.49, 175.87,  88.86],
       [212.19, 133.49,  54.79],
       [181.17, 102.94,  36.18],
       [115.1 ,  53.77,  15.23]]),
       'imgs/input2.png': np.array([[ 50.9 ,  49.07,  20.62],
       [144.35, 142.37,  68.76],
       [ 58.45,  98.21,  76.68],
       [ 47.21,  64.9 ,  19.75],
       [ 75.94, 107.21,  88.47],
       [110.73, 193.01, 103.59],
       [169.94, 110.82,  22.24],
       [ 38.24,  74.13,  89.  ],
       [105.75,  63.45,  33.  ],
       [ 27.06,  33.33,  28.2 ],
       [156.78, 197.28,  44.47],
       [188.47, 155.32,  24.02],
       [ 19.35,  42.9 ,  63.2 ],
       [ 78.25, 131.45,  44.16],
       [ 74.04,  36.51,  14.55],
       [254.54, 251.8 ,  42.45],
       [ 98.13,  75.17,  67.1 ],
       [ 44.48, 114.7 ,  97.86],
       [255.  , 255.  , 255.  ],
       [254.96, 255.  , 201.62],
       [177.42, 222.95, 122.64],
       [ 95.35, 121.51,  66.48],
       [ 45.4 ,  59.18,  32.  ],
       [ 17.68,  23.99,  12.22]]),
       'imgs/input3.png': np.array([[ 46.91,  52.44,  42.82],
       [ 79.55,  91.72,  79.28],
       [ 51.57,  78.57,  82.  ],
       [ 45.05,  59.76,  42.57],
       [ 53.83,  75.32,  80.8 ],
       [ 62.35,  94.57,  83.76],
       [ 87.4 ,  77.66,  46.56],
       [ 43.46,  73.97,  90.7 ],
       [ 70.15,  63.79,  58.75],
       [ 35.12,  45.89,  51.37],
       [ 78.05,  98.41,  60.95],
       [ 81.89,  80.2 ,  42.7 ],
       [ 31.05,  61.54,  82.08],
       [ 64.01,  94.28,  68.84],
       [ 63.8 ,  51.19,  42.29],
       [105.98, 114.55,  62.56],
       [ 66.15,  68.64,  77.28],
       [ 42.77,  82.59,  86.94],
       [130.47, 169.14, 154.25],
       [107.98, 141.87, 130.75],
       [ 84.54, 111.66, 103.55],
       [ 61.9 ,  82.87,  76.68],
       [ 42.23,  56.92,  52.76],
       [ 21.6 ,  31.25,  27.78]])}

class TestIO(unittest.TestCase):
    def test_model(self):
        model = color_calibration(fileDict['imgs/input1.png']/255, Color(ColorChecker2005_Lab_D50_2, Lab_D50_2))
        src_rgbl = array([[0.68078957, 0.12382801, 0.01514889],
       [0.81177942, 0.32550452, 0.089818  ],
       [0.61259378, 0.2831933 , 0.07478902],
       [0.52696493, 0.20105976, 0.00958657],
       [0.80402284, 0.30419523, 0.12989841],
       [0.78658646, 0.63184111, 0.12062068],
       [0.78999637, 0.25520249, 0.03462853],
       [0.51866697, 0.16114393, 0.1078387 ],
       [0.74820768, 0.11770076, 0.06862177],
       [0.59776825, 0.05765816, 0.02886627],
       [0.8793145 , 0.56346033, 0.0403954 ],
       [0.84124847, 0.42120746, 0.03287592],
       [0.23333214, 0.06780408, 0.05612276],
       [0.5176423 , 0.41210976, 0.01896255],
       [0.73888613, 0.06575388, 0.06181293],
       [0.88326036, 0.58018751, 0.04321991],
       [0.75922531, 0.13149072, 0.1282041 ],
       [0.4345097 , 0.32331019, 0.10494139],
       [0.94110142, 0.77941419, 0.26946323],
       [0.88438952, 0.5949049 , 0.17536928],
       [0.84722687, 0.44160449, 0.09834799],
       [0.66743106, 0.24076803, 0.03394333],
       [0.47141286, 0.13592419, 0.01362205],
       [0.17377101, 0.03256864, 0.00203026]])
        na(src_rgbl, model.src_rgbl, decimal=4)
        dst_rgbl = array([[ 0.17303173,  0.08211037,  0.05672686],
       [ 0.56832031,  0.29269488,  0.21835529],
       [ 0.10365019,  0.19588357,  0.33140475],
       [ 0.10159676,  0.14892193,  0.05188294],
       [ 0.22159627,  0.21584476,  0.43461196],
       [ 0.10806379,  0.51437196,  0.41264213],
       [ 0.74736423,  0.20062878,  0.02807988],
       [ 0.05757947,  0.10516793,  0.40296109],
       [ 0.56676218,  0.08424805,  0.11969461],
       [ 0.11099515,  0.04230796,  0.14292554],
       [ 0.34546869,  0.50872001,  0.04944204],
       [ 0.79461323,  0.35942459,  0.02051968],
       [ 0.01710416,  0.05022043,  0.29220674],
       [ 0.05598012,  0.30021149,  0.06871162],
       [ 0.45585457,  0.03033727,  0.04085654],
       [ 0.85737614,  0.56757335,  0.0068503 ],
       [ 0.53348585,  0.08861148,  0.30750446],
       [-0.0374061 ,  0.24699498,  0.40041217],
       [ 0.91262695,  0.91493909,  0.89367049],
       [ 0.57981916,  0.59200418,  0.59328881],
       [ 0.35490581,  0.36544831,  0.36755375],
       [ 0.19007357,  0.19186587,  0.19308397],
       [ 0.08529188,  0.08887994,  0.09257601],
       [ 0.0303193 ,  0.03113818,  0.03274845]])
        na(dst_rgbl, model.dst_rgbl, decimal=4)

        # print(repr(model.initial_white_balance()))
        wb = array([[0.49129477, 0.        , 0.        ],
                [0.        , 0.85751383, 0.        ],
                [0.        , 0.        , 3.15992365]])
        na(wb, model.initial_white_balance(), decimal=4)
        # print(repr(model.initial_least_square()))
        ls = array([[ 0.46550883, -0.10509726, -0.08713523],
            [ 0.1039808 ,  1.00393982,  0.04950424],
            [ 0.24414935,  0.42125035,  3.59751081]])
        na(ls, model.initial_least_square(), decimal=4)      
        # print(repr(model.ccm))
        ccm = array([[ 0.7409443 ,  0.35435699,  0.33689953],
            [ 0.20459753,  0.84167375,  0.07261064],
            [-0.20511954,  0.1767599 ,  3.10780907]])
        na(ccm, model.ccm, decimal=4)
        assert model.weights is None
        assert (model.mask==array([True]*24)).all() 

    def test_masks_weights_1(self):
        model = color_calibration(fileDict['imgs/input1.png']/255, Macbeth_D50_2,
                            weights_list = array([1.1, 0, 0, 1.2, 0, 0, 
                                                1.3, 0, 0, 1.4, 0, 0,
                                                0.5, 0, 0, 0.6, 0, 0, 
                                                0.7, 0, 0, 0.8, 0, 0]),
                            weights_coeff=1.5)
        na(model.weights, array([1.15789474, 1.26315789, 1.36842105, 1.47368421, 0.52631579,
       0.63157895, 0.73684211, 0.84210526]),decimal=4)
        na(model.mask, array([ True, False, False,  True, False, False,  True, False, False,
        True, False, False,  True, False, False,  True, False, False,
        True, False, False,  True, False, False]))

    def test_masks_weights_2(self):
        model = color_calibration(fileDict['imgs/input1.png']/255, Macbeth_D50_2,
                            weights_coeff=1.5, saturated_threshold=(0.05, 0.93))
        na(model.weights, array([0.65554256, 1.49454705, 1.00499244, 0.79735434, 1.16327759,
       1.68623868, 1.37973155, 0.73213388, 1.0169629 , 0.47430246,
       1.70312161, 0.45414218, 1.15910007, 0.7540434 , 1.05049802,
       1.04551645, 1.54082353, 1.02453421, 0.6015915 , 0.26154558]), decimal=4)
        na(model.mask, array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True, False,  True,  True,
       False, False,  True,  True,  True,  True]))

if __name__ == "__main__":
    unittest.main()
